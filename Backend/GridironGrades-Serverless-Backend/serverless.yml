service: GridironGrades-Serverless-Backend
frameworkVersion: '3'

custom:
  tableName: 'users-table-${sls:stage}'

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          # Resource: arn:aws:dynamodb:${aws:us-east-1}:${aws:403043975613}:table/${self:service}-userTable-${sls:stage}
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]

  environment:
    USERS_TABLE: ${self:custom.tableName}
    # USERS_TABLE: ${self:service}-userTable-${sls:stage}

functions:
  api:
    handler: index.handler
    events:
      - httpApi: '*'

# functions: 
# getUser:
#   handler: getUser.getUser
#   events: 
#     -httpApi: 
#       path: /
#       method: get 

functions: 
createUser:
  handler: createUser.createUser
  events: 
    -httpApi: 
      path: / 
      method: post 

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
